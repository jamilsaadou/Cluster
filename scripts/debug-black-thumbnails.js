#!/usr/bin/env node

/**
 * Script de diagnostic avanc√© pour les vignettes noires
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîç Diagnostic avanc√© des vignettes noires...\n');

const UPLOAD_DIR = path.join(process.cwd(), 'uploads', 'images');

// 1. V√©rifier les permissions du dossier
console.log('üìÅ V√©rification des permissions:');
try {
  const stats = fs.statSync(UPLOAD_DIR);
  console.log(`   Dossier: ${UPLOAD_DIR}`);
  console.log(`   Permissions: ${stats.mode.toString(8)}`);
  console.log(`   Propri√©taire: ${stats.uid}:${stats.gid}`);
} catch (error) {
  console.log(`‚ùå Erreur: ${error.message}`);
}

// 2. Lister les images avec d√©tails
console.log('\nüì∏ Images disponibles:');
if (fs.existsSync(UPLOAD_DIR)) {
  const files = fs.readdirSync(UPLOAD_DIR);
  const imageFiles = files.filter(file => /\.(jpg|jpeg|png|webp|gif)$/i.test(file));
  
  imageFiles.forEach((file, index) => {
    const filePath = path.join(UPLOAD_DIR, file);
    const stats = fs.statSync(filePath);
    console.log(`   ${index + 1}. ${file}`);
    console.log(`      Taille: ${Math.round(stats.size / 1024)}KB`);
    console.log(`      Modifi√©: ${stats.mtime.toISOString()}`);
    console.log(`      Permissions: ${stats.mode.toString(8)}`);
    
    // V√©rifier si le fichier est lisible
    try {
      const buffer = fs.readFileSync(filePath);
      console.log(`      ‚úÖ Lisible (${buffer.length} bytes)`);
      
      // V√©rifier les premiers bytes pour s'assurer que c'est une vraie image
      const header = buffer.slice(0, 10);
      if (file.toLowerCase().endsWith('.jpg') || file.toLowerCase().endsWith('.jpeg')) {
        if (header[0] === 0xFF && header[1] === 0xD8) {
          console.log(`      ‚úÖ Format JPEG valide`);
        } else {
          console.log(`      ‚ùå Format JPEG invalide`);
        }
      } else if (file.toLowerCase().endsWith('.png')) {
        if (header[0] === 0x89 && header[1] === 0x50 && header[2] === 0x4E && header[3] === 0x47) {
          console.log(`      ‚úÖ Format PNG valide`);
        } else {
          console.log(`      ‚ùå Format PNG invalide`);
        }
      }
    } catch (error) {
      console.log(`      ‚ùå Non lisible: ${error.message}`);
    }
    console.log('');
  });
  
  // 3. Tester l'API directement
  if (imageFiles.length > 0) {
    const testFile = imageFiles[0];
    console.log(`üß™ Test de l'API pour: ${testFile}`);
    console.log(`   URL: http://localhost:3000/api/images/${testFile}`);
    console.log('');
    console.log('   Pour tester manuellement:');
    console.log(`   1. D√©marrez le serveur: npm run dev`);
    console.log(`   2. Ouvrez: http://localhost:3000/api/images/${testFile}`);
    console.log(`   3. V√©rifiez si l'image s'affiche`);
    console.log('');
  }
}

// 4. V√©rifier la configuration Next.js
console.log('‚öôÔ∏è V√©rification de la configuration Next.js:');
const nextConfigPath = path.join(process.cwd(), 'next.config.mjs');
if (fs.existsSync(nextConfigPath)) {
  console.log('   ‚úÖ next.config.mjs trouv√©');
  try {
    const config = fs.readFileSync(nextConfigPath, 'utf8');
    if (config.includes('images')) {
      console.log('   ‚úÖ Configuration images pr√©sente');
    } else {
      console.log('   ‚ö†Ô∏è Pas de configuration images sp√©cifique');
    }
  } catch (error) {
    console.log(`   ‚ùå Erreur lecture config: ${error.message}`);
  }
} else {
  console.log('   ‚ö†Ô∏è next.config.mjs non trouv√©');
}

// 5. V√©rifier le middleware
console.log('\nüõ°Ô∏è V√©rification du middleware:');
const middlewarePath = path.join(process.cwd(), 'middleware.js');
if (fs.existsSync(middlewarePath)) {
  console.log('   ‚úÖ middleware.js trouv√©');
  const middleware = fs.readFileSync(middlewarePath, 'utf8');
  if (middleware.includes('/api/images')) {
    console.log('   ‚ö†Ô∏è Le middleware mentionne /api/images');
    console.log('   üí° Cela pourrait causer des probl√®mes d\'authentification');
  } else {
    console.log('   ‚úÖ Le middleware ne mentionne pas sp√©cifiquement /api/images');
  }
} else {
  console.log('   ‚ùå middleware.js non trouv√©');
}

console.log('\nüîß Solutions possibles:');
console.log('');
console.log('1. üåê Probl√®me de serveur de d√©veloppement:');
console.log('   - Red√©marrer le serveur: npm run dev');
console.log('   - Vider le cache: rm -rf .next');
console.log('');
console.log('2. üîí Probl√®me d\'authentification persistant:');
console.log('   - V√©rifier que l\'API /api/images/[filename] est bien publique');
console.log('   - Tester l\'URL directement dans un onglet priv√©');
console.log('');
console.log('3. üì± Probl√®me de navigateur:');
console.log('   - Vider le cache du navigateur');
console.log('   - Tester dans un autre navigateur');
console.log('   - Ouvrir les outils de d√©veloppement (F12)');
console.log('   - V√©rifier l\'onglet Network pour les requ√™tes d\'images');
console.log('');
console.log('4. üé® Probl√®me CSS:');
console.log('   - Les images peuvent √™tre masqu√©es par du CSS');
console.log('   - V√©rifier les styles appliqu√©s aux √©l√©ments img');
console.log('');
console.log('5. üîÑ Probl√®me de CORS:');
console.log('   - M√™me si l\'API est publique, il peut y avoir des probl√®mes CORS');
console.log('   - V√©rifier les en-t√™tes de r√©ponse');

console.log('\nüìã Checklist de d√©bogage:');
console.log('');
console.log('‚ñ° Red√©marrer le serveur de d√©veloppement');
console.log('‚ñ° Tester l\'URL d\'image directement');
console.log('‚ñ° V√©rifier la console du navigateur');
console.log('‚ñ° V√©rifier l\'onglet Network');
console.log('‚ñ° Tester en navigation priv√©e');
console.log('‚ñ° V√©rifier les permissions des fichiers');
console.log('‚ñ° V√©rifier que les fichiers ne sont pas corrompus');

console.log('\n‚ú® Diagnostic termin√© !');

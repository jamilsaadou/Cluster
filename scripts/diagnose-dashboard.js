#!/usr/bin/env node

/**
 * Script pour diagnostiquer les probl√®mes du tableau de bord
 * Usage: node scripts/diagnose-dashboard.js
 */

console.log('üîç DIAGNOSTIC DU TABLEAU DE BORD');
console.log('=' .repeat(60));

console.log('\nüìã PROBL√àMES POSSIBLES:');

console.log('\n1. üóÑÔ∏è Base de donn√©es vide ou mal configur√©e');
console.log('   ‚Ä¢ Aucun site ou activit√© en base');
console.log('   ‚Ä¢ Tables manquantes ou corrompues');
console.log('   ‚Ä¢ Relations entre tables incorrectes');

console.log('\n2. üîê Probl√®me d\'authentification API');
console.log('   ‚Ä¢ Token non transmis √† l\'API /api/dashboard/stats');
console.log('   ‚Ä¢ Fonction requireAuth qui √©choue');
console.log('   ‚Ä¢ JWT_SECRET incorrect');

console.log('\n3. üêõ Erreur dans le code de l\'API');
console.log('   ‚Ä¢ Erreur dans les requ√™tes Prisma');
console.log('   ‚Ä¢ Champs manquants dans la base');
console.log('   ‚Ä¢ Incoh√©rence dans les noms de propri√©t√©s');

console.log('\n4. üåê Probl√®me de r√©seau/proxy');
console.log('   ‚Ä¢ Nginx qui bloque les requ√™tes API');
console.log('   ‚Ä¢ Timeout sur les requ√™tes');
console.log('   ‚Ä¢ CORS ou headers manquants');

console.log('\nüß™ TESTS DE DIAGNOSTIC:');

console.log('\n1. Test de l\'API dashboard directement:');
console.log(`
   # Test avec curl
   curl -X GET https://207.180.201.77/api/dashboard/stats \\
     -H "Cookie: token=VOTRE_TOKEN" \\
     -v
`);

console.log('\n2. Test de l\'API auth/me:');
console.log(`
   curl -X GET https://207.180.201.77/api/auth/me \\
     -H "Cookie: token=VOTRE_TOKEN" \\
     -v
`);

console.log('\n3. V√©rification de la base de donn√©es:');
console.log(`
   # Se connecter √† MySQL
   mysql -u username -p database_name
   
   # V√©rifier les tables
   SHOW TABLES;
   
   # V√©rifier les donn√©es
   SELECT COUNT(*) FROM Site;
   SELECT COUNT(*) FROM Activite;
   SELECT COUNT(*) FROM User;
   SELECT COUNT(*) FROM Region;
`);

console.log('\n4. V√©rification des logs:');
console.log('   # Logs PM2 en temps r√©el');
console.log('   pm2 logs suivicluster --lines 0');
console.log('   ');
console.log('   # Puis tester le dashboard dans le navigateur');

console.log('\nüõ†Ô∏è SOLUTIONS PAR PROBL√àME:');

console.log('\n   Probl√®me 1: Base de donn√©es vide');
console.log('   Solution: Importer des donn√©es de test ou cr√©er des donn√©es');
console.log('   ');
console.log('   Probl√®me 2: Authentification API');
console.log('   Solution: V√©rifier les cookies et JWT_SECRET');
console.log('   ');
console.log('   Probl√®me 3: Erreur de code');
console.log('   Solution: Corriger l\'API et red√©marrer');
console.log('   ');
console.log('   Probl√®me 4: Probl√®me r√©seau');
console.log('   Solution: V√©rifier la configuration Nginx');

console.log('\nüîß CORRECTIONS IMM√âDIATES:');

console.log('\n1. Corriger l\'incoh√©rence dans l\'API dashboard:');
console.log('   ‚Ä¢ captureSystems ‚Üí captageSystems');
console.log('   ‚Ä¢ V√©rifier tous les noms de propri√©t√©s');

console.log('\n2. Ajouter une gestion d\'erreur robuste:');
console.log('   ‚Ä¢ Try/catch autour des requ√™tes Prisma');
console.log('   ‚Ä¢ Logs d√©taill√©s des erreurs');
console.log('   ‚Ä¢ Valeurs par d√©faut si pas de donn√©es');

console.log('\n3. V√©rifier la structure de la base:');
console.log('   ‚Ä¢ Tables Site, Activite, User, Region existent');
console.log('   ‚Ä¢ Relations correctement d√©finies');
console.log('   ‚Ä¢ Index et contraintes en place');

console.log('\nüì± TESTS DANS LE NAVIGATEUR:');

console.log('\n1. Ouvrir les DevTools (F12)');
console.log('2. Aller dans l\'onglet Network');
console.log('3. Recharger le dashboard');
console.log('4. V√©rifier les requ√™tes vers /api/dashboard/stats');
console.log('5. Regarder la r√©ponse de l\'API');

console.log('\n   Si l\'API retourne:');
console.log('   ‚Ä¢ 401 Unauthorized ‚Üí Probl√®me d\'authentification');
console.log('   ‚Ä¢ 500 Internal Error ‚Üí Erreur serveur/base de donn√©es');
console.log('   ‚Ä¢ Timeout ‚Üí Probl√®me de performance/r√©seau');
console.log('   ‚Ä¢ 200 mais donn√©es vides ‚Üí Base de donn√©es vide');

console.log('\nüö® ACTIONS IMM√âDIATES:');

console.log('\n1. V√©rifier les logs PM2:');
console.log('   pm2 logs suivicluster --lines 20');

console.log('\n2. Tester l\'API manuellement:');
console.log('   # D\'abord se connecter pour obtenir le cookie');
console.log('   curl -X POST https://207.180.201.77/api/auth/login \\');
console.log('     -H "Content-Type: application/json" \\');
console.log('     -d \'{"email":"admin@cluster.ne","password":"AdminCluster2025!"}\' \\');
console.log('     -c cookies.txt');
console.log('   ');
console.log('   # Puis tester l\'API dashboard');
console.log('   curl -X GET https://207.180.201.77/api/dashboard/stats \\');
console.log('     -b cookies.txt -v');

console.log('\n3. V√©rifier la base de donn√©es:');
console.log('   # Compter les enregistrements');
console.log('   mysql -u username -p -e "SELECT COUNT(*) as sites FROM Site; SELECT COUNT(*) as activites FROM Activite;" database_name');

console.log('\n4. Si la base est vide, cr√©er des donn√©es de test:');
console.log('   # Ex√©cuter le script de seed si disponible');
console.log('   node prisma/seed.js');
console.log('   ');
console.log('   # Ou cr√©er manuellement quelques enregistrements');

console.log('\nüí° CONSEILS DE D√âBOGAGE:');
console.log('   ‚Ä¢ Toujours v√©rifier les logs PM2 en premier');
console.log('   ‚Ä¢ Tester les APIs avec curl avant le navigateur');
console.log('   ‚Ä¢ V√©rifier que la base de donn√©es contient des donn√©es');
console.log('   ‚Ä¢ S\'assurer que JWT_SECRET est identique partout');

console.log('\n' + '=' .repeat(60));
console.log('üèÅ Diagnostic termin√© - Suivez les √©tapes ci-dessus');

// Afficher des informations sur l'environnement
console.log('\nüîß INFORMATIONS ENVIRONNEMENT:');
console.log('   NODE_ENV:', process.env.NODE_ENV || 'Non d√©fini');
console.log('   JWT_SECRET:', process.env.JWT_SECRET ? 'D√©fini' : 'Non d√©fini');
console.log('   DATABASE_URL:', process.env.DATABASE_URL ? 'D√©fini' : 'Non d√©fini');

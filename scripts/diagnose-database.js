#!/usr/bin/env node

/**
 * Script pour diagnostiquer les probl√®mes de base de donn√©es
 * Usage: node scripts/diagnose-database.js
 */

console.log('üóÑÔ∏è DIAGNOSTIC BASE DE DONN√âES');
console.log('=' .repeat(60));

console.log('\nüìã PROBL√àMES POSSIBLES AVEC LA BASE DE DONN√âES:');

console.log('\n1. üîå Probl√®me de connexion');
console.log('   ‚Ä¢ DATABASE_URL incorrecte ou mal format√©e');
console.log('   ‚Ä¢ Serveur MySQL arr√™t√© ou inaccessible');
console.log('   ‚Ä¢ Credentials incorrects (username/password)');
console.log('   ‚Ä¢ Base de donn√©es inexistante');

console.log('\n2. üìä Base de donn√©es vide');
console.log('   ‚Ä¢ Tables cr√©√©es mais aucune donn√©e');
console.log('   ‚Ä¢ Migration Prisma non ex√©cut√©e');
console.log('   ‚Ä¢ Donn√©es supprim√©es accidentellement');

console.log('\n3. üèóÔ∏è Structure incorrecte');
console.log('   ‚Ä¢ Tables manquantes');
console.log('   ‚Ä¢ Colonnes manquantes ou mal typ√©es');
console.log('   ‚Ä¢ Relations entre tables cass√©es');
console.log('   ‚Ä¢ Index manquants');

console.log('\n4. üîê Probl√®me de permissions');
console.log('   ‚Ä¢ Utilisateur MySQL sans droits suffisants');
console.log('   ‚Ä¢ Acc√®s refus√© √† certaines tables');
console.log('   ‚Ä¢ Firewall bloquant la connexion');

console.log('\nüß™ TESTS DE DIAGNOSTIC:');

console.log('\n1. V√©rification de DATABASE_URL:');
console.log('   DATABASE_URL:', process.env.DATABASE_URL ? 'D√©fini' : '‚ùå Non d√©fini');
if (process.env.DATABASE_URL) {
  try {
    const url = new URL(process.env.DATABASE_URL);
    console.log('   ‚Ä¢ Protocole:', url.protocol);
    console.log('   ‚Ä¢ Host:', url.hostname);
    console.log('   ‚Ä¢ Port:', url.port || '3306 (d√©faut)');
    console.log('   ‚Ä¢ Database:', url.pathname.substring(1));
    console.log('   ‚Ä¢ Username:', url.username);
    console.log('   ‚Ä¢ Password:', url.password ? '***' : 'Non d√©fini');
  } catch (e) {
    console.log('   ‚ùå URL mal format√©e:', e.message);
  }
}

console.log('\n2. Test de connexion MySQL:');
console.log(`
   # Test de connexion basique
   mysql -h HOST -P PORT -u USERNAME -p DATABASE_NAME -e "SELECT 1 as test;"
   
   # Exemple avec les valeurs de DATABASE_URL:
   mysql -h localhost -P 3306 -u username -p database_name -e "SELECT 1 as test;"
`);

console.log('\n3. V√©rification des tables:');
console.log(`
   # Lister toutes les tables
   mysql -u username -p database_name -e "SHOW TABLES;"
   
   # V√©rifier la structure des tables principales
   mysql -u username -p database_name -e "DESCRIBE User; DESCRIBE Site; DESCRIBE Activite; DESCRIBE Region;"
`);

console.log('\n4. Comptage des donn√©es:');
console.log(`
   # Compter les enregistrements dans chaque table
   mysql -u username -p database_name -e "
   SELECT 'User' as table_name, COUNT(*) as count FROM User
   UNION ALL
   SELECT 'Site' as table_name, COUNT(*) as count FROM Site  
   UNION ALL
   SELECT 'Activite' as table_name, COUNT(*) as count FROM Activite
   UNION ALL
   SELECT 'Region' as table_name, COUNT(*) as count FROM Region;"
`);

console.log('\nüõ†Ô∏è SOLUTIONS PAR PROBL√àME:');

console.log('\n   Probl√®me 1: Connexion impossible');
console.log('   Solutions:');
console.log('   ‚Ä¢ V√©rifier que MySQL est d√©marr√©: sudo systemctl status mysql');
console.log('   ‚Ä¢ Tester la connexion: mysql -u username -p');
console.log('   ‚Ä¢ V√©rifier DATABASE_URL dans .env.production');
console.log('   ‚Ä¢ V√©rifier les credentials MySQL');

console.log('\n   Probl√®me 2: Base de donn√©es vide');
console.log('   Solutions:');
console.log('   ‚Ä¢ Ex√©cuter les migrations Prisma: npx prisma migrate deploy');
console.log('   ‚Ä¢ G√©n√©rer le client Prisma: npx prisma generate');
console.log('   ‚Ä¢ Importer des donn√©es: mysql -u username -p database < backup.sql');
console.log('   ‚Ä¢ Cr√©er le super admin: node prisma/seed-superadmin.js');

console.log('\n   Probl√®me 3: Structure incorrecte');
console.log('   Solutions:');
console.log('   ‚Ä¢ Reset de la base: npx prisma migrate reset');
console.log('   ‚Ä¢ Push du sch√©ma: npx prisma db push');
console.log('   ‚Ä¢ V√©rifier le sch√©ma: npx prisma db pull');

console.log('\n   Probl√®me 4: Permissions insuffisantes');
console.log('   Solutions:');
console.log('   ‚Ä¢ Cr√©er un utilisateur avec tous les droits');
console.log('   ‚Ä¢ GRANT ALL PRIVILEGES ON database.* TO \'user\'@\'%\';');
console.log('   ‚Ä¢ FLUSH PRIVILEGES;');

console.log('\nüö® ACTIONS IMM√âDIATES:');

console.log('\n1. Test de connexion rapide:');
console.log('   # Remplacez les valeurs par celles de votre DATABASE_URL');
console.log('   mysql -h localhost -u username -p -e "SELECT VERSION();"');

console.log('\n2. V√©rification des tables essentielles:');
console.log(`
   mysql -u username -p database_name -e "
   SELECT TABLE_NAME, TABLE_ROWS 
   FROM information_schema.TABLES 
   WHERE TABLE_SCHEMA = 'database_name' 
   AND TABLE_NAME IN ('User', 'Site', 'Activite', 'Region');"
`);

console.log('\n3. Test avec Prisma:');
console.log('   # Dans le r√©pertoire de l\'application');
console.log('   npx prisma db pull');
console.log('   npx prisma generate');

console.log('\n4. Cr√©ation du super admin si n√©cessaire:');
console.log('   node prisma/seed-superadmin.js');

console.log('\nüìä DONN√âES DE TEST MINIMALES:');

console.log('\n   Si la base est vide, cr√©er au minimum:');
console.log('   ‚Ä¢ 1 r√©gion (pour les relations)');
console.log('   ‚Ä¢ 1 utilisateur admin');
console.log('   ‚Ä¢ 1 site de test');
console.log('   ‚Ä¢ 1 activit√© de test');

console.log('\n   SQL pour cr√©er des donn√©es de test:');
console.log(`
   -- Ins√©rer une r√©gion
   INSERT INTO Region (nom, code) VALUES ('Test Region', 'TR');
   
   -- V√©rifier l'ID de la r√©gion
   SELECT id FROM Region WHERE nom = 'Test Region';
   
   -- Ins√©rer un site (remplacez REGION_ID par l'ID obtenu)
   INSERT INTO Site (nom, regionId, superficie, createdById) 
   VALUES ('Site Test', REGION_ID, 10.5, USER_ID);
`);

console.log('\nüîß COMMANDES DE R√âPARATION:');

console.log('\n   Si la base est corrompue:');
console.log('   1. Sauvegarder les donn√©es importantes');
console.log('   2. npx prisma migrate reset --force');
console.log('   3. npx prisma migrate deploy');
console.log('   4. npx prisma generate');
console.log('   5. node prisma/seed-superadmin.js');

console.log('\n   Si Prisma ne fonctionne pas:');
console.log('   1. rm -rf node_modules/.prisma');
console.log('   2. npx prisma generate');
console.log('   3. pm2 restart suivicluster');

console.log('\nüí° CONSEILS:');
console.log('   ‚Ä¢ Toujours tester la connexion MySQL avant Prisma');
console.log('   ‚Ä¢ V√©rifier les logs MySQL: sudo tail -f /var/log/mysql/error.log');
console.log('   ‚Ä¢ S\'assurer que la base de donn√©es existe avant de s\'y connecter');
console.log('   ‚Ä¢ Utiliser des outils comme phpMyAdmin pour visualiser les donn√©es');

console.log('\n' + '=' .repeat(60));
console.log('üèÅ Diagnostic termin√© - Testez la connexion √† la base de donn√©es');

// Test de connexion Prisma si possible
console.log('\nüß™ TEST PRISMA (si disponible):');
try {
  console.log('   Tentative de connexion avec Prisma...');
  // Note: Ce test n√©cessiterait d'importer Prisma, ce qui peut √©chouer
  console.log('   ‚ö†Ô∏è  Ex√©cutez: npx prisma db pull pour tester la connexion');
} catch (error) {
  console.log('   ‚ùå Impossible de tester Prisma depuis ce script');
  console.log('   üí° Ex√©cutez manuellement: npx prisma db pull');
}

const fs = require('fs');
const path = require('path');

console.log('üó∫Ô∏è  TEST DE FONCTIONNALIT√â DE LA CARTOGRAPHIE\n');

// V√©rifier les d√©pendances Leaflet
console.log('1Ô∏è‚É£  V√©rification des d√©pendances...');

try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  const dependencies = packageJson.dependencies || {};
  
  const requiredDeps = {
    'leaflet': 'Biblioth√®que de cartographie principale',
    'leaflet.markercluster': 'Plugin de clustering des marqueurs'
  };
  
  let allDepsPresent = true;
  
  Object.entries(requiredDeps).forEach(([dep, description]) => {
    if (dependencies[dep]) {
      console.log(`   ‚úÖ ${dep} (${dependencies[dep]}) - ${description}`);
    } else {
      console.log(`   ‚ùå ${dep} - MANQUANT - ${description}`);
      allDepsPresent = false;
    }
  });
  
  if (allDepsPresent) {
    console.log('   üéâ Toutes les d√©pendances sont pr√©sentes !');
  } else {
    console.log('   ‚ö†Ô∏è  Certaines d√©pendances sont manquantes');
  }
  
} catch (error) {
  console.log(`   ‚ùå Erreur lors de la lecture du package.json: ${error.message}`);
}

// V√©rifier les fichiers de cartographie
console.log('\n2Ô∏è‚É£  V√©rification des fichiers de cartographie...');

const mapFiles = [
  {
    path: 'app/components/Map/MapComponent.js',
    description: 'Composant principal de la carte'
  },
  {
    path: 'app/(protected)/sites/map/page.js',
    description: 'Page de cartographie des sites'
  },
  {
    path: 'app/(protected)/activites/map/page.js',
    description: 'Page de cartographie des activit√©s'
  }
];

mapFiles.forEach(file => {
  if (fs.existsSync(file.path)) {
    const content = fs.readFileSync(file.path, 'utf8');
    
    // V√©rifications sp√©cifiques
    const checks = [
      {
        test: content.includes('credentials: \'include\''),
        message: 'Appels API avec credentials'
      },
      {
        test: content.includes('dynamic'),
        message: 'Import dynamique pour SSR'
      },
      {
        test: content.includes('leaflet'),
        message: 'Import de Leaflet'
      }
    ];
    
    console.log(`   üìÅ ${file.path} - ${file.description}`);
    checks.forEach(check => {
      if (check.test) {
        console.log(`      ‚úÖ ${check.message}`);
      } else {
        console.log(`      ‚ö†Ô∏è  ${check.message} - Non trouv√©`);
      }
    });
    
  } else {
    console.log(`   ‚ùå ${file.path} - FICHIER MANQUANT`);
  }
});

// V√©rifier la structure des donn√©es attendues
console.log('\n3Ô∏è‚É£  V√©rification de la structure des donn√©es...');

const dataStructureChecks = [
  {
    file: 'app/components/Map/MapComponent.js',
    checks: [
      'site.coordonnees',
      'activite.geolocalisation',
      'site.coordonnees.lat',
      'site.coordonnees.lng',
      'activite.geolocalisation.lat',
      'activite.geolocalisation.lng'
    ]
  }
];

dataStructureChecks.forEach(fileCheck => {
  if (fs.existsSync(fileCheck.file)) {
    const content = fs.readFileSync(fileCheck.file, 'utf8');
    console.log(`   üìä Structure des donn√©es dans ${fileCheck.file}:`);
    
    fileCheck.checks.forEach(check => {
      if (content.includes(check)) {
        console.log(`      ‚úÖ ${check}`);
      } else {
        console.log(`      ‚ö†Ô∏è  ${check} - Non trouv√©`);
      }
    });
  }
});

// V√©rifier les APIs n√©cessaires
console.log('\n4Ô∏è‚É£  V√©rification des APIs...');

const apiFiles = [
  {
    path: 'app/api/sites/route.js',
    description: 'API des sites'
  },
  {
    path: 'app/api/activites/route.js',
    description: 'API des activit√©s'
  },
  {
    path: 'app/api/regions/route.js',
    description: 'API des r√©gions'
  }
];

apiFiles.forEach(api => {
  if (fs.existsSync(api.path)) {
    console.log(`   ‚úÖ ${api.path} - ${api.description}`);
  } else {
    console.log(`   ‚ùå ${api.path} - MANQUANT - ${api.description}`);
  }
});

// Recommandations
console.log('\nüéØ RECOMMANDATIONS POUR LA CARTOGRAPHIE:');
console.log('   1. Assurez-vous que les sites ont des coordonn√©es GPS (lat, lng)');
console.log('   2. Assurez-vous que les activit√©s ont une g√©olocalisation (lat, lng)');
console.log('   3. Testez la carte sur diff√©rents navigateurs');
console.log('   4. V√©rifiez que les popups s\'affichent correctement');
console.log('   5. Testez les filtres de r√©gion et de type');

// Instructions de test
console.log('\nüß™ INSTRUCTIONS DE TEST:');
console.log('   1. D√©marrez le serveur: npm run dev');
console.log('   2. Connectez-vous avec: admin@cluster.ne / AdminCluster2025!');
console.log('   3. Naviguez vers: /sites/map');
console.log('   4. Naviguez vers: /activites/map');
console.log('   5. V√©rifiez que les marqueurs s\'affichent');
console.log('   6. Testez les filtres et les popups');

// Probl√®mes courants et solutions
console.log('\nüîß PROBL√àMES COURANTS ET SOLUTIONS:');
console.log('   ‚Ä¢ Carte ne s\'affiche pas: V√©rifiez les imports Leaflet');
console.log('   ‚Ä¢ Marqueurs manquants: V√©rifiez les coordonn√©es dans la DB');
console.log('   ‚Ä¢ Erreurs SSR: V√©rifiez l\'import dynamique');
console.log('   ‚Ä¢ Erreurs 401: V√©rifiez credentials: "include"');
console.log('   ‚Ä¢ Clustering ne fonctionne pas: V√©rifiez leaflet.markercluster');

console.log('\n‚úÖ Test de fonctionnalit√© termin√© !');
